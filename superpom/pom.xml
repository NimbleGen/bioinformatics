<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.roche.sequencing</groupId>
	<artifactId>superpom</artifactId>
	<packaging>pom</packaging>
	<version>1.0</version>
	<name>Roche NimbleGen Super POM</name>
	<description>The Super POM for the Roche sequencing project. The top level, parent project that builds the sub-modules.</description>

	<dependencies>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-classic</artifactId>
				<version>1.0.11</version>
			</dependency>
			<dependency>
				<groupId>org.testng</groupId>
				<artifactId>testng</artifactId>
				<version>6.8</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>14.0.1</version>
			</dependency>
			<dependency>
				<groupId>org.utgenome.thirdparty</groupId>
				<artifactId>picard</artifactId>
				<version>1.86.0</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<!-- Resource filtering: Update the build meta info in StringBundle.properties -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.properties</include>
				</includes>
				<!--<targetPath>${project.build.directory}/filtered-sources/resources</targetPath> -->
			</resource>
			<!-- This implies that all other files should be filtered and is needed 
				because of the above include. Confusing syntax, but necessary. -->
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<excludes>
					<exclude>**/*.properties</exclude>
				</excludes>
			</resource>

			<resource>
				<filtering>true</filtering>
				<directory>src/main/config</directory>
				<includes>
					<include>**</include>
				</includes>
			</resource>
		</resources>

		<!-- For all the plugins used here and in the child POMs this section defined 
			the plugin version and inherited configurations. Plugin settings and configuration 
			that applied in this section mean if a child pom uses the plugin then these 
			settings are inherited. Search here for publicly available 3rd party versions: 
			http://repository.sonatype.org -->
		<pluginManagement>
			<plugins>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>1.0.1</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.3.2</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>2.3.2</version>
					<configuration>
						<archive>
							<!-- Uncompressed for faster class loading. Less concerned about storage 
								size or download time. -->
							<compress>false</compress>

							<!-- Prevent default inclusion of pom.xml and pom.properties in jar -->
							<addMavenDescriptor>false</addMavenDescriptor>

							<manifest>
								<addDefaultImplementationEntries>true
								</addDefaultImplementationEntries>
								<addDefaultSpecificationEntries>true
								</addDefaultSpecificationEntries>
							</manifest>

							<!-- Continuous integration build state properties to jar manifest -->
							<manifestEntries>
								<Svn-Revision>${SVN_REVISION}</Svn-Revision>
								<Build-Tag>${BUILD_TAG}</Build-Tag>
								<Build-Number>${BUILD_NUMBER}</Build-Number>
								<Build-Id>${BUILD_ID}</Build-Id>
							</manifestEntries>
						</archive>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.codehaus.gmaven</groupId>
					<artifactId>gmaven-plugin</artifactId>
					<version>1.3</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>2.5</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.4</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>2.2.1</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.12</version>
				</plugin>

				<plugin>
					<!-- Not to be confused with less featured maven-license-plugin. Turns 
						NOTICE.vm and LICENSE.vm into distributable text files. -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-remote-resources-plugin</artifactId>
					<version>1.2.1</version>
				</plugin>

				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.gmaven
										</groupId>
										<artifactId>
											gmaven-plugin
										</artifactId>
										<versionRange>
											[1.3,)
										</versionRange>
										<goals>
											<goal>execute</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-remote-resources-plugin
										</artifactId>
										<versionRange>
											[1.2.1,)
										</versionRange>
										<goals>
											<goal>bundle</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>


		<!-- Plugins listed here are the plugins that are applied to each child 
			module. Version should not be applied here. Child poms that also the same 
			plugins (not recommended) will override these plugin settings. -->
		<plugins>
			<plugin>
				<groupId>org.codehaus.gmaven</groupId>
				<artifactId>gmaven-plugin</artifactId>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<source>
								import java.util.Date
								import java.text.MessageFormat
								def
								vartimestamp =
								MessageFormat.format("{0,date,yyyy}",
								new Date())
								project.properties['current.year'] =
								vartimestamp
							</source>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<encoding>${sourceEncoding}</encoding>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${jdkVersion}</source>
					<target>${jdkVersion}</target>
					<encoding>${sourceEncoding}</encoding>
					<showWarnings>true</showWarnings>
					<showDeprecation>false</showDeprecation>
				</configuration>
			</plugin>
		</plugins>
	</build>


	<repositories>

		<repository>
			<id>biojava-maven-repo</id>
			<name>BioJava repository</name>
			<url>http://www.biojava.org/download/maven/</url>
		</repository>
		<repository>
			<id>org.maven.repo1</id>
			<name>Central Maven Repository</name>
			<url>http://repo1.maven.org/maven2</url>
		</repository>
	</repositories>

	<prerequisites>
		<maven>3.0.4</maven>
	</prerequisites>





	<inceptionYear>2012</inceptionYear>

	<organization>
		<name>Roche Applied Sciences</name>
		<url>http://www.roche-applied-science.com</url>
	</organization>

	<!-- The list of developers contributing code to AppJava. This list is not 
		automatically connected to the "People" list found in Jenkins as Jenkins 
		maintains its own list. -->
	<developers>
		<developer>
			<id>matt.kenney</id>
			<name>Matt Kenney</name>
			<email>matt.kenney@roche.com</email>
			<organization>${project.organization.name}</organization>
			<organizationUrl>${project.organization.url}</organizationUrl>
			<roles>
				<role>Developer</role>
			</roles>
			<timezone>-6</timezone>
		</developer>

		<developer>
			<id>candace.bain</id>
			<name>Candace Bain</name>
			<email>candace.bain@roche.com</email>
			<organization>${project.organization.name}</organization>
			<organizationUrl>${project.organization.url}</organizationUrl>
			<roles>
				<role>Developer</role>
			</roles>
			<timezone>-6</timezone>
		</developer>

		<developer>
			<id>kurt.heilman</id>
			<name>Kurt Heilman</name>
			<email>kurt.heilman@roche.com</email>
			<organization>${project.organization.name}</organization>
			<organizationUrl>${project.organization.url}</organizationUrl>
			<roles>
				<role>Developer</role>
			</roles>
			<timezone>-6</timezone>
		</developer>

	</developers>

	<properties>
		<spring.version>3.0.5.RELEASE</spring.version>
		<security.version>3.0.5.RELEASE</security.version>

		<maven.build.timestamp.format>yyyyMMdd_HHmm
		</maven.build.timestamp.format>
		<maven.build.timestamp />
		<current.year />
		<buildNumber>${project.version} (${maven.build.timestamp})</buildNumber>

		<jdkVersion>1.7</jdkVersion>

		<sourceEncoding>ISO-8859-1</sourceEncoding>
		<BUILD_NUMBER>${maven.build.timestamp}</BUILD_NUMBER>

		<!-- Default product version is the maven project version, but can be overridden 
			by build process, Product version is the customer facing string in the about 
			box. -->
		<product.version>${project.version}</product.version>
	</properties>

</project>