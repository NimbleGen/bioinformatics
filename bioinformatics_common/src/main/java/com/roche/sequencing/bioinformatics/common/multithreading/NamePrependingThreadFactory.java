/*
 *    Copyright 2016 Roche NimbleGen Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.roche.sequencing.bioinformatics.common.multithreading;

import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;

/**
 * 
 * Class for setting a name that prepends all threads created by this factory
 * 
 */
public class NamePrependingThreadFactory implements ThreadFactory {

	private ThreadFactory defaultThreadFactory;
	private String namePrepender;

	/**
	 * 
	 * @param namePrepender
	 *            name that prepends all thread names generated by this factory
	 */
	public NamePrependingThreadFactory(String namePrepender) {
		super();
		defaultThreadFactory = Executors.defaultThreadFactory();
		this.namePrepender = namePrepender;
	}

	@Override
	public Thread newThread(Runnable r) {
		Thread newThread = defaultThreadFactory.newThread(r);
		newThread.setName(namePrepender + newThread.getName());
		return newThread;
	}

}
